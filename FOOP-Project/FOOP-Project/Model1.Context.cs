//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FOOP_Project
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GiftAppDBEntities2 : DbContext
    {
        public GiftAppDBEntities2()
            : base("name=GiftAppDBEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EventTbl> EventTbls { get; set; }
        public virtual DbSet<GiftTbl> GiftTbls { get; set; }
        public virtual DbSet<PersonTbl> PersonTbls { get; set; }
        public virtual DbSet<UserTbl> UserTbls { get; set; }
    
        public virtual int AddPerson(Nullable<int> inputUserId, string inputPersonName, Nullable<System.DateTime> inputPersonDOB, string inputPersonGender)
        {
            var inputUserIdParameter = inputUserId.HasValue ?
                new ObjectParameter("InputUserId", inputUserId) :
                new ObjectParameter("InputUserId", typeof(int));
    
            var inputPersonNameParameter = inputPersonName != null ?
                new ObjectParameter("InputPersonName", inputPersonName) :
                new ObjectParameter("InputPersonName", typeof(string));
    
            var inputPersonDOBParameter = inputPersonDOB.HasValue ?
                new ObjectParameter("InputPersonDOB", inputPersonDOB) :
                new ObjectParameter("InputPersonDOB", typeof(System.DateTime));
    
            var inputPersonGenderParameter = inputPersonGender != null ?
                new ObjectParameter("InputPersonGender", inputPersonGender) :
                new ObjectParameter("InputPersonGender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPerson", inputUserIdParameter, inputPersonNameParameter, inputPersonDOBParameter, inputPersonGenderParameter);
        }
    
        public virtual int AddUser(string inputUserName, string inputUserPassword)
        {
            var inputUserNameParameter = inputUserName != null ?
                new ObjectParameter("InputUserName", inputUserName) :
                new ObjectParameter("InputUserName", typeof(string));
    
            var inputUserPasswordParameter = inputUserPassword != null ?
                new ObjectParameter("InputUserPassword", inputUserPassword) :
                new ObjectParameter("InputUserPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUser", inputUserNameParameter, inputUserPasswordParameter);
        }
    
        public virtual int DeleteEvent(Nullable<int> inputEventId)
        {
            var inputEventIdParameter = inputEventId.HasValue ?
                new ObjectParameter("InputEventId", inputEventId) :
                new ObjectParameter("InputEventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEvent", inputEventIdParameter);
        }
    
        public virtual int DeleteGift(Nullable<int> inputGiftId)
        {
            var inputGiftIdParameter = inputGiftId.HasValue ?
                new ObjectParameter("InputGiftId", inputGiftId) :
                new ObjectParameter("InputGiftId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGift", inputGiftIdParameter);
        }
    
        public virtual int DeletePerson(Nullable<int> inputPersonId)
        {
            var inputPersonIdParameter = inputPersonId.HasValue ?
                new ObjectParameter("InputPersonId", inputPersonId) :
                new ObjectParameter("InputPersonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePerson", inputPersonIdParameter);
        }
    
        public virtual int AddEvent(string inputEventName, Nullable<System.DateTime> inputEventDate, Nullable<int> inputPersonId)
        {
            var inputEventNameParameter = inputEventName != null ?
                new ObjectParameter("InputEventName", inputEventName) :
                new ObjectParameter("InputEventName", typeof(string));
    
            var inputEventDateParameter = inputEventDate.HasValue ?
                new ObjectParameter("InputEventDate", inputEventDate) :
                new ObjectParameter("InputEventDate", typeof(System.DateTime));
    
            var inputPersonIdParameter = inputPersonId.HasValue ?
                new ObjectParameter("InputPersonId", inputPersonId) :
                new ObjectParameter("InputPersonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEvent", inputEventNameParameter, inputEventDateParameter, inputPersonIdParameter);
        }
    
        public virtual int AddGift(string inputGiftName, Nullable<decimal> inputGiftPrice, Nullable<int> inputEventId)
        {
            var inputGiftNameParameter = inputGiftName != null ?
                new ObjectParameter("InputGiftName", inputGiftName) :
                new ObjectParameter("InputGiftName", typeof(string));
    
            var inputGiftPriceParameter = inputGiftPrice.HasValue ?
                new ObjectParameter("InputGiftPrice", inputGiftPrice) :
                new ObjectParameter("InputGiftPrice", typeof(decimal));
    
            var inputEventIdParameter = inputEventId.HasValue ?
                new ObjectParameter("InputEventId", inputEventId) :
                new ObjectParameter("InputEventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGift", inputGiftNameParameter, inputGiftPriceParameter, inputEventIdParameter);
        }
    }
}
